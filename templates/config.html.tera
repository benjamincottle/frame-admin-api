{% extends 'base.html.tera' %}
{% block title %}Config{% endblock %}
{% block head %}
{{ super() }}
<style type="text/css">
  .p_layout {
    width: 100%;
    display: flex;
    gap: 16px;
    flex-wrap: wrap;
    justify-content: center;
    padding-top: 16px;
  }
  fieldset {
    cursor: pointer;
    color: var(--text-colour);
    border: 3px solid var(--fieldset-border);
    transition: opacity 0.3s ease-in-out;
  }
  fieldset:hover {
    color: var(--text-colour-highlight);
    border: 3px solid var(--fieldset-border-highlight);
  }
  .p_layout fieldset:not(.fieldset-selected):not(.fieldset-display-shelf-item) {
    opacity: 0.76;
  }
  .p_layout fieldset:hover {
    opacity: 1;
  }
  .p_layout fieldset:hover fieldset {
    opacity: 1;
  }
  .fieldset-selected {
    color: var(--text-colour-highlight);
    border: 3px solid var(--fieldset-border-highlight);
    opacity: 1;
  }
  .fieldset-selected:hover {
    color: var(--text-colour-highlight);
    border: 3px solid var(--fieldset-border-highlight);
    opacity: 1;
  }
  .p_layout:hover fieldset:hover {
    opacity: 1;
  }
  .fieldset-display-shelf, .fieldset-display-shelf:hover {
    cursor: default;
    border: 3px solid var(--fieldset-border);
    opacity: 1;
    color: var(--text-colour-highlight);
    font-size: 1.0em;
  }
  .fieldset-display-shelf-item, .fieldset-display-shelf-item:hover {
    cursor: default;
    border: 2px solid var(--fieldset-border);
    opacity: 1;
    color: var(--text-colour);
    font-size: 0.8em;
  }
  #display_shelf {
    width: 100%;
    min-height: 120px;
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center;
    padding-bottom: 5px;
  }  
  #pager {
    margin-top: 16px;
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
  }
  .paginate_button {
    box-sizing: border-box;
    display: inline-block;
    min-width: 1.5em;
    padding: .5em 1em;
    margin-left: 2px;
    text-align: center;
    text-decoration: none !important;
    cursor: pointer;
    color: inherit !important;
    border: 1px solid transparent;
    border-radius: 2px;
    background: transparent
  }
  .paginate_button.current,
  .paginate_button.current:hover {
    pointer-events: none;
    color:inherit !important;
    border: 1px solid rgba(0, 0, 0, 0.3);
    background-color: rgba(230, 230, 230, 0.1);
    background: linear-gradient(to bottom, rgba(230, 230, 230, 0.1) 0%, rgba(0, 0, 0, 0.1) 100%)
  }
  .paginate_button.disabled,
  .paginate_button.disabled:hover,
  .paginate_button.disabled:active {
    cursor: default;
    color: #666 !important;
    border: 1px solid transparent;
    background:transparent;
    box-shadow: none;
    pointer-events: none;
  }
  .paginate_button:hover {
    color: white !important;
    border: 1px solid #111;
    background-color: #585858;
    background: linear-gradient(to bottom, #585858 0%, #111 100%)
  }
  .paginate_button:active {
    outline: none;
    background-color: #2b2b2b;
    background: linear-gradient(to bottom, #2b2b2b 0%, #0c0c0c 100%);
    box-shadow: inset 0 0 3px #111
  }
  .ellipsis {
    padding: 0 1em
  }
</style>
{% endblock head %}
{% block content %}
<fieldset class="fieldset-display-shelf">
  <legend>Selected Albums</legend>
  <div id="display_shelf"></div>
</fieldset>

<div id="pager"></div>
<div id="album_list" class="p_layout"></div>

{% endblock content %}
{% block scripts %}
<script>
  const albumsPerPage = 20;
  let currentPage = 1;
  const albumList = {{ album_list | json_encode(pretty = true) | safe }};
  const totalPages = Math.ceil(albumList.length / albumsPerPage);
  let selectedAlbums = {{ selected_albums | json_encode(pretty = true) | safe }};
  window.onload = function () {
    renderAlbumList();
    renderSelectedList();
  };

  function renderAlbumList() {
    const album_list_div = document.getElementById("album_list");
    album_list_div.innerHTML = ""; // clear existing content
    for (let i = (currentPage - 1) * albumsPerPage; i < Math.min(currentPage * albumsPerPage, albumList.length); i++) {
      const album = albumList[i];
      if (album.title.length > 15) {
        album.title = album.title.substring(0, 14) + "…";
      }
      let fieldset_class = "";
      if (selectedAlbums.includes(album.id)) {
        fieldset_class = "fieldset-selected";
      }
      html = `
          <fieldset id="${album.id}" class="${fieldset_class}" onclick="this.classList.toggle('fieldset-selected'); toggle_selection(this.id);">
            <legend>${album.title} (${album.mediaItemsCount})</legend>
              <img src= ${album.coverPhotoBaseUrl}=w169-h169-c>
          </fieldset>
        `;
      const album_div = document.createElement("div");
      album_div.innerHTML = html;
      album_list_div.appendChild(album_div);
    }
    // add navigation controls
    const pager_div = document.getElementById("pager");
    pager_div.innerHTML = `
      <a class="paginate_button" style="pointer-events: none;">Available Albums</a> <a class="paginate_button previous ${currentPage === 1 ? 'disabled' : ''}" id="data_previous" onclick="goToPage(${currentPage - 1})"> &lt; </a>
      <span>
      `;
    if (totalPages < 6) {
      // if there are 6 or fewer pages, show all pages
      for (let i = 1; i < totalPages; i++) {
        if (i === currentPage) {
          pager_div.innerHTML += `<a class="paginate_button current">${i}</a>`;
        } else {
          pager_div.innerHTML += `<a class="paginate_button" onclick="goToPage(${i})">${i}</a>`;
        }
      }
    } else {
      // if there are more than 6 pages, show abbreviated version
      pager_div.innerHTML += `<a class="paginate_button ${currentPage === 1 ? 'current"' : '" onclick="goToPage(1)"'}>1</a>`
      let startPage = currentPage - 1;
      let endPage = currentPage + 1;
      if (startPage <= 2) {
        startPage = 2;
        endPage = 5;
      }
      if (endPage >= totalPages - 2) {
        startPage = totalPages - 4;
        endPage = totalPages - 1;
      }
      if (startPage > 2) {
        pager_div.innerHTML += `<span class="ellipsis">…</span>`;
      }
      for (let i = startPage; i <= endPage; i++) {
        if (i === currentPage) {
          pager_div.innerHTML += `<a class="paginate_button current">${i}</a>`;
        } else {
          pager_div.innerHTML += `<a class="paginate_button" onclick="goToPage(${i})">${i}</a>`;
        }
      }
      if (endPage < totalPages - 2) {
        pager_div.innerHTML += `<span class="ellipsis">…</span>`;
      }
    }
    pager_div.innerHTML += `
      <a class="paginate_button ${currentPage === totalPages ?  'current"' : `" onclick="goToPage(${totalPages})"`}>${totalPages}</a>
    </span>
    <a class="paginate_button next ${currentPage === totalPages ? 'disabled' : ''}" id="data_next" onclick="goToPage(${currentPage + 1})"> &gt; </a>
    `;
  }

  function renderSelectedList() {
    const display_shelf_div = document.getElementById("display_shelf");
    if (selectedAlbums.length !== 0) {
      display_shelf_div.innerHTML = "";
      for (album of albumList) {
        if (album.title.length > 15) {
          album.title = album.title.substring(0, 14) + "…";
        }
        html = `
            <fieldset class="fieldset-display-shelf-item">
              <legend>${album.title}</legend>
                <img src= ${album.coverPhotoBaseUrl}=w89-h89-c>
            </fieldset>
          `;
        if (selectedAlbums.includes(album.id)) {
          const album_div = document.createElement("div");
          album_div.innerHTML = html;
          display_shelf_div.appendChild(album_div);
        }

      }
    } else {
      display_shelf_div.innerHTML = "<span style='opacity: 0.76;'>Select an album to get started</span>";
    }
     
  }

  function goToPage(page) {
    currentPage = page;
    renderAlbumList();
    renderSelectedList();
  }

  function prevPage() {
    if (currentPage > 1) {
      currentPage--;
      renderAlbumList();
      renderSelectedList();
    }
  }

  function nextPage() {
    if (currentPage < totalPages) {
      currentPage++;
      renderAlbumList();
      renderSelectedList();
    }
  }

  function toggle_selection(fieldset) {
    let album_id = fieldset;
    const xhr = new XMLHttpRequest();
    xhr.open("GET", "/frame_admin/config");
    xhr.setRequestHeader("Google-Photos-Album-ID", album_id);
    xhr.onload = function () {
      if (xhr.status === 200) {
        selectedAlbums = JSON.parse(xhr.responseText);
        renderSelectedList();
      } else {
        console.error(xhr.statusText);
      }
    };
    xhr.send();
  }
</script>
{% endblock scripts %}
